================================================================================
NXP：
	IMX6：
		Android 4.3
		Kernel version：3.0.35
	IMX8：
		Android O
		Kernel version：4.9.105

		Android P
		Kernel version：4.14.62

MTK：
	Android 5.1
	Kernel version：3.10.65
================================================================================
代码下载：

环境配置：
	基于android 4.3的编译环境，安装下述包，即可编译mtk的android 5.1
	sudo apt-get install sudo apt-get install  openjdk-7-jdk gperf libxml2-utils make python-networkx zlib1g-dev:i386 zip build-essential flex mingw32 tofrodos libswitch-perl
	
	android 4.3需要jdk为1.6
	android 5.1 需要jdk为1.7
	编译不同的代码，手动切换一下jdk版本即可。

	安装make 3.8.1
	https://ftp.gnu.org/gnu/make/   
	下载make-3.81.tar.gz
	解压
		cd
		./configure
		make
		sudo make install
	
相关资料：
	Geely MTK BSP资料及硬件相关资料(Block图)，均放到了下述路径。大家先看一下，熟悉一下硬件及代码。
	\\10.1.74.196\qinxb\work\share\Geely_MTK

SVN路径：
	之前给大家单独COPY了软件资料，现已上传至SVN
	http://10.1.55.2/svn/MP_Management/ManagementLibrary/GeelyCommon/02.Conception/吉利文档/04.功能协议文档/SX/20181210 和芯星通UM220-INS/软件资料.zip

	祝工作顺利！

================================================================================
编译系统：
device/pvetec/emx8816aa/full_emx8816aa.mk

	MTK_TARGET_PROJECT=device/pvetec

	ifeq ($(TARGET_BUILD_VARIANT), eng)
		KERNEL_DEFCONFIG ?= emx8816aa_debug_defconfig
	else
		KERNEL_DEFCONFIG ?= emx8816aa_defconfig
	endif

	PRELOADER_TARGET_PRODUCT ?= emx8816aa
	LK_PROJECT ?= emx8816aa

	PRODUCT_MANUFACTURER := alps
	PRODUCT_NAME := full_emx8816aa
	PRODUCT_DEVICE := emx8816aa
	PRODUCT_MODEL := emx8816aa
	PRODUCT_POLICY := android.policy_phone
	PRODUCT_BRAND := alps

pvetec/emx8816aa/BoardConfig.mk
	include device/mediatek/mt6735/BoardConfig.mk
	include device/mediatek/common/BoardConfig.mk

	include device/pvetec/$(MTK_TARGET_PROJECT)/ProjectConfig.mk

device/mediatek/mt6735/BoardConfig.mk

	TARGET_ARCH := arm64
	TARGET_ARCH_VARIANT := armv8-a
	TARGET_CPU_ABI := arm64-v8a
	TARGET_CPU_ABI2 :=
	TARGET_CPU_VARIANT := cortex-a53
	TARGET_CPU_SMP := true

	TARGET_2ND_ARCH := arm
	TARGET_2ND_ARCH_VARIANT := armv7-a-neon
	TARGET_2ND_CPU_ABI := armeabi-v7a
	TARGET_2ND_CPU_ABI2 := armeabi
	TARGET_2ND_CPU_VARIANT := cortex-a53

	TARGET_TOOLCHAIN_ROOT := prebuilts/gcc/$(HOST_PREBUILT_TAG)/aarch64/cit-aarch64-linux-android-4.9
	TARGET_TOOLS_PREFIX := $(TARGET_TOOLCHAIN_ROOT)/bin/aarch64-linux-android-

	KERNEL_CROSS_COMPILE:= $(abspath $(TOP))/$(TARGET_TOOLS_PREFIX)

	ARCH_ARM_HAVE_TLS_REGISTER := true
	TARGET_BOARD_PLATFORM ?= mt6735
	TARGET_USERIMAGES_USE_EXT4 := true
	TARGET_NO_FACTORYIMAGE := true
	KERNELRELEASE := 3.4

pvetec/emx8816aa/ProjectConfig.mk
	配置了各种MK宏

device/mediatek/mt6735/BoardConfig.mk

	# mkbootimg header, which is used in LK

	BOARD_KERNEL_BASE = 0x40000000
	BOARD_KERNEL_OFFSET = 0x00080000
	BOARD_RAMDISK_OFFSET = 0x04000000

	BOARD_TAGS_OFFSET = 0xE000000

	BOARD_KERNEL_CMDLINE = bootopt=64S3,32S1,32S1
	BOARD_MKBOOTIMG_ARGS := --kernel_offset $(BOARD_KERNEL_OFFSET) --ramdisk_offset $(BOARD_RAMDISK_OFFSET) --tags_offset $(BOARD_TAGS_OFFSET)

	# Add MTK compile options to wrap MTK's modifications on AOSP.
	COMMON_GLOBAL_CFLAGS += -DMTK_AOSP_ENHANCEMENT
	COMMON_GLOBAL_CPPFLAGS += -DMTK_AOSP_ENHANCEMENT

	# ptgen
	MTK_PTGEN_CHIP := $(shell echo $(TARGET_BOARD_PLATFORM) | tr '[a-z]' '[A-Z]')
	include device/mediatek/build/build/tools/ptgen/$(MTK_PTGEN_CHIP)/ptgen.mk


build/core/Makefile
	INSTALLED_BOOTIMAGE_TARGET := $(PRODUCT_OUT)/boot.img
	INSTALLED_BOOTLOADER_MODULE := $(PRODUCT_OUT)/bootloader

	BOARD_KERNEL_CMDLINE = bootopt=64S3,32N2,64N2

	INTERNAL_BOOTIMAGE_ARGS ="--kernel out/target/product/emx8816aa/kernel --ramdisk out/target/product/emx8816aa/ramdisk.img --cmdline "bootopt=64S3,32N2,64N2" --base 0x40000000 --ramdisk_offset 0x04000000 --kernel_offset 0x00080000 --tags_offset 0xE000000 --board 1544682395"

Kernel config file:
	pvetec/emx8816aa/full_emx8816aa.mk:40:KERNEL_DEFCONFIG ?= emx8816aa_defconfig
		arch/arm64/configs/emx8816aa_defconfig
		arch/arm64/configs/emx8816aa_debug_defconfig

DTS:
	arch/arm64/configs/emx8816aa_debug_defconfig:302:CONFIG_BUILD_ARM64_APPENDED_DTB_IMAGE_NAMES="emx8816aa"
	arch/arm64/configs/emx8816aa_defconfig:301:CONFIG_BUILD_ARM64_APPENDED_DTB_IMAGE_NAMES="emx8816aa"
		arch/arm64/boot/dts/emx8816aa.dts

	KERNEL_ZIMAGE_OUT := $(KERNEL_OUT)/arch/$(TARGET_ARCH)/boot/Image.gz-dtb

	kernel-3.10/arch/arm64/boot/Makefile
		$(obj)/Image.gz-dtb: $(obj)/Image.gz $(DTB_OBJS) FORCE
			$(call if_changed,cat)

PRELOADER:
	mediatek/build/build/makemtk.mk:118:PRELOADER_IMAGES := mediatek/preloader/bin/preloader_emx8816aa.bin
	mediatek/build/build/makemtk.mk



Audio Hal:
	vendor/mediatek/proprietary/platform/mt6735/hardware/audio

编译连接参数：
	TARGET_GLOBAL_CFLAGS：很重要
================================================================================
重要的镜像文件：

MTK bootloader：
	Pre-loader -》lk主要干的事情：

	1、初始化DRAM等必须硬件;
	2、与flashtool USB握手，download 相关检测 & sec boot检测；
	3、将lk载入DRAM，若实现了EL3则把atf载入内存;
	4、跳转到lk，若实现了EL3，则先跳转到atf，初始化atf后再跳转回lk初始化；

	lk -》 kernel 主要干的事情：
	1、打开MMU,使能I/D-cache，加速lk执行，显示logo、充电相关；
	2、从emmc中boot分区取出boot.img解压，将根文件系统（ramdisk）、zImage load到DRAM；
	3、解析dtb，写入到DRAM指定区域；
	4、关闭MMU、irq / fiq，关闭I/D-cache, 拉起 kernel;

	来源：CSDN
	原文：https://blog.csdn.net/forever_2015/article/details/53047993



preloader:
	作用：
		Pre-loader主要干的事情就是初始化某些硬件，比如： UART,GPIO,DRAM,TIMER,RTC,PMIC 等等，建立起最基本的运行环境,最重要的就是初始化DRAM.

		main 函数小结：
			1、各种硬件初始化(uart、pmic、wdt、timer、mem..)；
			2、获取系统启动模式等，保存在全局变量中；
			3、Security check，跟secro.img相关；
			4、如果系统已经实现el3，则进入tz初始化；
			5、获取lk加载到DRAM的地址（固定值）,然后从ROM中找到lk分区的地址， 如果没找到jump_addr，则 goto error；
			6、battery check，如果没有电池就会陷入while(1);
			7、jump到lk(如果有实现el3，则会先jump到el3，然后再回到lk)


	配置文件：包括uart配置，ATF，SDRAM等，启动信息；
		bootable/bootloader/preloader/platform/mt6735/default.mak

	参考下述MTK preloader资料：
		https://blog.csdn.net/forever_2015/article/details/53000643

	入口函数：
		bootable/bootloader/preloader/platform/mt6735/src/core/main.c

	编译命令：
		make -C bootable/bootloader/preloader -s -f Makefile  PRELOADER_OUT=/home/qinxb/work/geely/mtk/Ecarx-Android-5.1-E01-v1.0/out/target/product/emx8816aa/obj/PRELOADER_OBJ MTK_PROJECT=emx8816aa TOOL_PATH=/home/qinxb/work/geely/mtk/Ecarx-Android-5.1-E01-v1.0/device/mediatek/build/build/tools ROOTDIR=/home/qinxb/work/geely/mtk/Ecarx-Android-5.1-E01-v1.0

	编译配置：
	device/pvetec/emx8816aa/full_emx8816aa.mk
		PRELOADER_TARGET_PRODUCT ?= emx8816aa
		LK_PROJECT ?= emx8816aa

	start to parse fig file!
	===========================================
	Platform Feature:
	CFG_FPGA_PLATFORM= 0
	CFG_EVB_PLATFORM= 0
	CFG_BATTERY_DETECT= 1
	CFG_PMT_SUPPORT=
	===========================================
	Communication Feature:
	CFG_UART_TOOL_HANDSHAKE= 0
	CFG_USB_TOOL_HANDSHAKE= 1
	CFG_USB_DOWNLOAD= 1
	CFG_LOG_BAUDRATE= 921600
	CFG_META_BAUDRATE= 115200
	CFG_UART_LOG= UART1
	CFG_UART_META= UART1
	CFG_EMERGENCY_DL_SUPPORT= 1
	CFG_EMERGENCY_DL_TIMEOUT_MS= 1000*5
	CFG_USB_UART_SWITCH= 1
	===========================================
	CFG_LOAD_AP_ROM= 0
	CFG_LOAD_MD_ROM= 0
	CFG_LOAD_MD_RAMDISK= 0
	CFG_LOAD_CONN_SYS= 0
	CFG_UBOOT_MEMADDR= 0x41E00000
	CFG_AP_ROM_MEMADDR= 0x62000000
	CFG_MD1_ROM_MEMADDR= 0x42000000
	CFG_MD1_RAMDISK_MEMADDR= 0x49CC0000
	CFG_MD2_ROM_MEMADDR= 0x42000000
	CFG_MD2_RAMDISK_MEMADDR= 0x43400000
	CFG_CONN_SYS_MEMADDR= 0x45A00000
	ONEKEY_REBOOT_NORMAL_MODE_PL= 1
	KPD_USE_EXTEND_TYPE= 0
	KPD_PMIC_LPRST_TD= 1
	MTK_PMIC_RST_KEY=
	CFG_ATF_SUPPORT= 1
	CFG_ATF_LOG_SUPPORT= 1
	CFG_TEE_SUPPORT= 0
	CFG_TRUSTONIC_TEE_SUPPORT= 0
	CFG_TEE_SECURE_MEM_PROTECTED= 1
	CFG_TEE_TRUSTED_APP_HEAP_SIZE= 0xA00000
	MTK_EFUSE_WRITER_SUPPORT= no

lk:
	编译命令：
		make -C bootable/bootloader/lk   BOOTLOADER_OUT=/home/qinxb/work/geely/mtk/Ecarx-Android-5.1-E01-v1.0/out/target/product/emx8816aa/obj/BOOTLOADER_OBJ ROOTDIR=/home/qinxb/work/geely/mtk/Ecarx-Android-5.1-E01-v1.0 emx8816aa

	编译配置：
	device/pvetec/emx8816aa/full_emx8816aa.mk
		PRELOADER_TARGET_PRODUCT ?= emx8816aa
		LK_PROJECT ?= emx8816aa

	代码解析：
		入口函数：
		bootable/bootloader/lk/kernel/main.c

	kmain 小结：
		1.初始化线程池，建立线程管理链表、运行队列等；
		2.初始化各种平台硬件，包括irq、timer，wdt，uart，led，pmic，i2c，gpio等，建立lk基本运行环境；
		3.初始化内核heap、内核timer等；
		4.创建系统初始化主线程，进入bootstrap2执行，使能中断，当前线程进入idle;

		来源：CSDN
		原文：https://blog.csdn.net/forever_2015/article/details/53047993


boot.img
	编译命令：
		make -C kernel-3.10 O=/home/qinxb/work/geely/mtk/Ecarx-Android-5.1-E01-v1.0/out/target/product/emx8816aa/obj/KERNEL_OBJ ARCH=arm64             CROSS_COMPILE=/home/qinxb/work/geely/mtk/Ecarx-Android-5.1-E01-v1.0/prebuilts/gcc/linux-x86/aarch64/cit-aarch64-linux-android-4.9/bin/aarch64-linux-android- ROOTDIR=/home/qinxb/work/geely/mtk/Ecarx-Android-5.1-E01-v1.0 emx8816aa_defconfig

		注意：make xxx_defconfig生成的.config可以直接make zImage，相当于copy mini2440_defconfig .config再执行make menuconfig的效果。

		参考文档：
		https://blog.csdn.net/kangear/article/details/39553337

		OBJCOPY arch/arm64/boot/Image
		DTC     arch/arm64/boot/dts/emx8816aa.dtb
		GZIP    arch/arm64/boot/Image.gz
		CAT     arch/arm64/boot/Image.gz-dtb

	Kernel配置文件：
		pvetec/emx8816aa/full_emx8816aa.mk:40:KERNEL_DEFCONFIG ?= emx8816aa_defconfig
			arch/arm64/configs/emx8816aa_defconfig
			arch/arm64/configs/emx8816aa_debug_defconfig

bootlogo：
	logo.bin生成过程：
		1.path:
			dev/logo/ecarx1080p/ecarx1080p_uboot.bmp

		2.将.bmp图片转换成.raw文件
			命令：
			$dev/logo/tool/bmp_to_raw /home/qinxb/work/geely/mtk/Ecarx-Android-5.1-E01-v1.0/out/target/product/emx8816aa/obj/BOOTLOADER_OBJ/build-emx8816aa/dev/logo/ecarx1080p/ecarx1080p_uboot.raw dev/logo/ecarx1080p/ecarx1080p_uboot.bmp

		3.将所有的.raw文件拼接为ecarx1080p.raw文件
			$dev/logo/tool/zpipe -l 9 ecarx1080p.raw ecarx1080p_uboot.raw ecarx1080p_battery.raw ecarx1080p_num_1.raw

		4.将.raw文件转换为.bin文件
			$dev/logo/../../scripts/mkimage /home/qinxb/work/geely/mtk/Ecarx-Android-5.1-E01-v1.0/out/target/product/emx8816aa/obj/BOOTLOADER_OBJ/build-emx8816aa/dev/logo/ecarx1080p.raw LOGO > /home/qinxb/work/geely/mtk/Ecarx-Android-5.1-E01-v1.0/out/target/product/emx8816aa/obj/BOOTLOADER_OBJ/build-emx8816aa/logo.bin


作用是？：
	python device/mediatek/build/build/tools/check_kernel_config.py -c device/pvetec/emx8816aa/ProjectConfig.mk -l bootable/bootloader/lk/  project/emx8816aa.mk -p emx8816aa
	python device/mediatek/build/build/tools/check_kernel_config.py -c device/pvetec/emx8816aa/ProjectConfig.mk -b bootable/bootloader/  preloader/custom/emx8816aa/emx8816aa.mk -p emx8816aa
	python device/mediatek/build/build/tools/check_kernel_config.py -c device/pvetec/emx8816aa/ProjectConfig.mk -k kernel-3.10/arch/arm64/  configs/emx8816aa_defconfig -p emx8816aa

作用是？：
	python ./build/tools/releasetools/rootcheck.py out/target/product/emx8816aa/system out/target/product/emx8816aa/lk.bin out/target/product/emx8816aa/recovery.img out/target/product/emx8816aa/boot.img out/target/product/emx8816aa/logo.bin out/target/product/emx8816aa/system/data

================================================================================
MTK资源情况：
	已知：
	uart: 4路
	IIS : 3路，2出1入
	SPI ：1路

================================================================================
E01 MTK 代码下载：
	repo init -u ssh://qinxb@10.1.55.31:29418/E01/platform/manifest -b master
	repo sync

JDK配置:
	sudo add-apt-repository ppa:openjdk-r/ppa 
	sudo apt-get update 
	sudo apt-get install openjdk-7-jdk

================================================================================

Android SELinux Enforing 和 Permissive 模式切换
	1、Running mode
	adb shell setenforce 1       // Enforing
	adb shell setenforce 0       // Permissive 

	2、Build mode：
	Ref  file ：  system\core\init\Android.mk  增加定义
	         LOCAL_CFLAGS += -DALLOW_DISABLE_SELINUX=1

	3. adb shell getenforce
	result : permissive 

================================================================================
MTK启动模式：

设备文件：
	/sys/class/BOOT/BOOT/boot/boot_mode

启动类型：
	MT_FACTORY_BOOT
	MT_ATE_FACTORY_BOOT
		factory_init.rc
		factory_init.project.rc
	
	
	MT_META_BOOT
		meta_init.rc
		meta_init.project.rc

================================================================================
Audio：
	// I2S1
    MT_SOC_DL1_PCM@0x11220000 {
            compatible = "mediatek,mt_soc_pcm_dl1";
            reg = <0x11220000 0x1000>;
            interrupts = <0 144 0x8>;
            audclk-gpio = <143 0>;
            audmiso-gpio = <144 0>;
            audmosi-gpio = <145 0>;
            vowclk-gpio = <148 0>;
            extspkamp-gpio = <129 0>;
            extspkamp_2-gpio = <128 0>;
            rcvspkswitch-gpio = <120 0>;
            i2s1clk-gpio = <135 0>;
            i2s1dat-gpio = <137 0>;
            i2s1mclk-gpio = <134 0>;
            i2s1ws-gpio = <136 0>;
    };

	MT_SOC_DL1_PCM@0x11220000 {
                compatible = "ak7738";
                reg = <0x18>;
        };
	};

	
			MT_SOC_DL1_PCM@0x11220000 {
			compatible = "mediatek,mt_soc_pcm_dl1";
			reg = <0x11220000 0x1000>;
			interrupts = <0 144 0x8>;
			audclk-gpio = <143 0>;
			audmiso-gpio = <144 0>;
			audmosi-gpio = <145 0>;
			vowclk-gpio = <148 0>;
			extspkamp-gpio = <129 0>;
			extspkamp_2-gpio = <128 0>;
			rcvspkswitch-gpio = <120 0>;						
			i2s1clk-gpio = <135 0>;
			i2s1dat-gpio = <137 0>;
			i2s1mclk-gpio = <134 0>;
			i2s1ws-gpio = <136 0>;
		};
	
		FM platform：
		TEF6686_FM_PCM {
			compatible = "tef6686_fm_pcm";
		};
	
	
	代码：
	
		dai_list：保存系统中注册的所有dai（cpu dai，codec dai）
				注册方法：
					snd_soc_register_component  -> snd_soc_register_dais -> snd_soc_register_dai
					snd_soc_register_codec -> snd_soc_register_dais -> snd_soc_register_dai
					
		codec_list:保存系统中注册的所有codec
				注册方法：
					snd_soc_register_codec
		platform_list：保存系统中注册的所有platform
				注册方法：
					snd_soc_register_platform
		
		audio系统中的platform如何理解？
		
		sound/soc/mediatek/mt_soc_audio_v3
		
		Machine:
		sound/soc/mediatek/mt_soc_audio_v3/mt_soc_machine.c
			注册platpform device（name=“soc-audio”）
		sound/soc/soc-core.c
			注册platform driver（name="soc-audio"）
			调用probe函数
				snd_soc_register_card(snd_soc_card card) //snd_soc_card card在mt_soc_machine.c里定义
					根据dai-link的数量申请相同数量的rtd
					card->rtd = devm_kzalloc(card->dev,sizeof(struct snd_soc_pcm_runtime) *(card->num_links + card->num_aux_devs)
					实例化声卡：
					snd_soc_instantiate_card(card)
						绑定每个dai-link中的dai：也就是将系统中注册的cpu-dai，codec及codec-dai，platform均保存到相应的rtd中
						soc_bind_dai_link(card, i)
						check每个dai-link的aux设备
						soc_check_aux_dev(card, i)
						initialize the register cache for each available codec：
						snd_soc_init_codec_cache(codec, compress_type)  ？？？不太理解，
						create and initialize a soundcard structure：
						ret = snd_card_create(SNDRV_DEFAULT_IDX1, SNDRV_DEFAULT_STR1,card->owner, 0, &card->snd_card);
							创建control device
							snd_ctl_create(card) ：
								snd_device_new
							创建infor
							snd_info_card_create(card)
							
			注册声卡：
				out：数据输出 	
				Debugfs:
				/sys/kernel/debug/mtksocaudio
				
				in ：模拟输入
				Debugfs:
				/sys/kernel/debug/mtksocanaaudio
				
				static char ParSetkeyAfe[] = "Setafereg";
				static char ParSetkeyAna[] = "Setanareg";
				static char ParSetkeyCfg[] = "Setcfgreg";
				static char PareGetkeyAfe[] = "Getafereg";
				static char PareGetkeyAna[] = "Getanareg";
		sound/soc/mediatek/mt_soc_audio_v3
		sound/soc/mediatek/mt_soc_audio_v3
		sound/soc/mediatek/mt_soc_audio_v3
		sound/soc/mediatek/mt_soc_audio_v3
		sound/soc/mediatek/mt_soc_audio_v3
		
		
		
		sound/soc/mediatek/mt_soc_audio_v3/AudDrv_Def.h
		
		
		Capture:
		sound/soc/mediatek/mt_soc_audio_v3/mt_soc_tdm_capture.c
		
		Platform:
		
		Codec:
		
		
	采样率：
		48k
		
		
	I2S:
	I2S为三线总线，3个信号分别为：
		①串行时钟SCK，也叫位时钟（BCK）。即每发送1位数字音频数据，SCK上都有1个脉冲。SCK的频率=2×采样频率×采样位数。
		在数据传输过程中，I2S总线的发送器和接收器都可以作为系统的主机来提供系统的时钟频率。
		② 帧时钟WS，即命令（声道）选择，用于切换左右声道的数据。WS的频率等于采样频率，由系统主机提供。WS为“1”表示传输的是左声道的数据，WS为“0”表示传输的是右声道的数据。
		③ 串行数据信号SD，用于传输二进制补码表示的音频数据。
		I2S格式的信号无论有多少位有效数据，数据位的最高位（MSB）总是被最先传输，1次能够发送的数据决定于I2S格式的有效位数。
		随着技术的发展，在统一的I2S接口下出现了多种不同的数据格式。根据SD信号相对于SCK和WS位置的不同，分为左对齐和右对齐2种格式
		在上面2种数据传输格式中，当WS为“1”时传输的是左声道的数据，当WS为“0”时传输的是右声道的数据。为了保证数字音频信号的正确传输，发送端和接收端必须采用相同的数据格式。

		介绍：
		https://blog.csdn.net/u010783226/article/details/82708282
		
	Android部分path设置：
		device/mediatek/mt6735/audio_device.xml
		
		<path name="ext_speaker_output" value="turnon">                 
		<kctl name="Ext_Speaker_Amp_Switch" value="On" />
		</path>
		
		<path name="speaker_output" value="turnon">
			<kctl name="Speaker_Amp_Switch" value="On" />
		</path>
		<path name="speaker_output" value="turnoff">
			<kctl name="Speaker_Amp_Switch" value="Off" />
		</path>
	
	
	张瑞铮：
		audio 播放：
		codec做从设备：
		soc做主设备：（提供clk，函数调用：AudDrv_Clk_On()）
		pcmC0D8p        I2S0DL1_PLayback
				{
					.name = "I2S0DL1OUTPUT",
					.stream_name = MT_SOC_I2SDL1_STREAM_NAME,
					.cpu_dai_name   = MT_SOC_I2S0DL1_NAME,
					.platform_name  = MT_SOC_I2S0DL1_PCM,
					.codec_dai_name = MT_SOC_CODEC_I2S0TXDAI_NAME,
					.codec_name = MT_SOC_CODEC_NAME,
					.init = mt_soc_audio_init,
					.ops = &mt_machine_audio_ops,
				},
				
		stream_name：
		sound/soc/mediatek/mt_soc_audio_v3/mt_soc_dai_stub.c:330:            .stream_name = MT_SOC_I2SDL1_STREAM_NAME,
		sound/soc/mediatek/mt_soc_audio_v3/mt_soc_machine.c:719:        .stream_name = MT_SOC_I2SDL1_STREAM_NAME,
		sound/soc/mediatek/mt_soc_audio_v3/mt_soc_codec_63xx.c:1102:            .stream_name = MT_SOC_I2SDL1_STREAM_NAME,
		sound/soc/mediatek/mt_soc_audio_v3/AudDrv_Def.h:316:#define MT_SOC_I2SDL1_STREAM_NAME "I2S0DL1_PLayback"
		
		cpu_dai_name：
		DTS：
			MT_SOC_DAI_NAME@0x11220000 {
				compatible = "mediatek,mt_soc_dai_stub";
			};
		
		sound/soc/mediatek/mt_soc_audio_v3/mt_soc_dai_stub.c:338:        .name = MT_SOC_I2S0DL1_NAME,
		sound/soc/mediatek/mt_soc_audio_v3/mt_soc_machine.c:720:        .cpu_dai_name   = MT_SOC_I2S0DL1_NAME,
		
		
		platform_name：（mt-soc-i2s0dl1-pcm）
		DTS：
			MT_SOC_I2S0DL1_PCM@0x11220000 {
				compatible = "mediatek,mt_soc_pcm_dl1_i2s0Dl1";
			};
		sound/soc/mediatek/mt_soc_audio_v3/mt_soc_pcm_dl1_i2s0Dl1.c:749:        dev_set_name(&pdev->dev, "%s", MT_SOC_I2S0DL1_PCM);
		sound/soc/mediatek/mt_soc_audio_v3/mt_soc_pcm_dl1_i2s0Dl1.c:797:        .name = MT_SOC_I2S0DL1_PCM,
		sound/soc/mediatek/mt_soc_audio_v3/mt_soc_pcm_dl1_i2s0Dl1.c:816:    soc_mtkI2S0dl1_dev = platform_device_alloc(MT_SOC_I2S0DL1_PCM, -1);
		sound/soc/mediatek/mt_soc_audio_v3/mt_soc_machine.c:721:        .platform_name  = MT_SOC_I2S0DL1_PCM,
		sound/soc/mediatek/mt_soc_audio_v3/AudDrv_Def.h:243:#define MT_SOC_I2S0DL1_PCM  "mt-soc-i2s0dl1-pcm"
		arch/arm64/boot/dts/mt6735.dtsi:1037:		MT_SOC_I2S0DL1_PCM@0x11220000 {
		
		代码解析：
			支持的采样率：constraints_sample_rates
			Open函数：
				提供CLK：
				AudDrv_Clk_On()
			Close函数：
				mtk_pcm_I2S0dl1_close
				1.	stop DAC output
				2.	stop I2S output
				
				I2S格式：I2S，位数为32位
				Format：32
				
			Prepare：
				
				
		codec_dai_name：（mt-soc-codec-I2s0tx-dai）
		
		DTS：
				MT_SOC_CODEC_NAME@0x11220000 {
					compatible = "mediatek,mt_soc_codec_63xx";
				};
				//内部DSP：PMIC+audio codec：芯片型号：MT6328V
		
		sound/soc/mediatek/mt_soc_audio_v3/mt_soc_machine.c:722:        .codec_dai_name = MT_SOC_CODEC_I2S0TXDAI_NAME,
		sound/soc/mediatek/mt_soc_audio_v3/mt_soc_codec_63xx.c:1099:        .name = MT_SOC_CODEC_I2S0TXDAI_NAME,
		sound/soc/mediatek/mt_soc_audio_v3/AudDrv_Def.h:272:#define MT_SOC_CODEC_I2S0TXDAI_NAME "mt-soc-codec-I2s0tx-dai"
		
		
		codec_name： （mt-soc-codec）
		sound/soc/mediatek/mt_soc_audio_v3/mt_soc_machine.c:663:        .codec_name = MT_SOC_CODEC_NAME,
		sound/soc/mediatek/mt_soc_audio_v3/mt_soc_machine.c:683:        .codec_name = MT_SOC_CODEC_NAME,
		sound/soc/mediatek/mt_soc_audio_v3/mt_soc_machine.c:703:        .codec_name = MT_SOC_CODEC_NAME,
		sound/soc/mediatek/mt_soc_audio_v3/mt_soc_machine.c:723:        .codec_name = MT_SOC_CODEC_NAME,
		sound/soc/mediatek/mt_soc_audio_v3/mt_soc_machine.c:793:        .codec_name = MT_SOC_CODEC_NAME,
		sound/soc/mediatek/mt_soc_audio_v3/mt_soc_machine.c:823:        .codec_name = MT_SOC_CODEC_NAME,
		sound/soc/mediatek/mt_soc_audio_v3/mt_soc_machine.c:853:        .codec_name = MT_SOC_CODEC_NAME,
		sound/soc/mediatek/mt_soc_audio_v3/mt_soc_machine.c:863:        .codec_name = MT_SOC_CODEC_NAME,
		sound/soc/mediatek/mt_soc_audio_v3/mt_soc_codec_63xx.c:4975:        dev_set_name(&pdev->dev, "%s", MT_SOC_CODEC_NAME);
		sound/soc/mediatek/mt_soc_audio_v3/mt_soc_codec_63xx.c:5003:        .name = MT_SOC_CODEC_NAME,
		sound/soc/mediatek/mt_soc_audio_v3/mt_soc_codec_63xx.c:5022:    soc_mtk_codec6331_dev = platform_device_alloc(MT_SOC_CODEC_NAME, -1);
		sound/soc/mediatek/mt_soc_audio_v3/AudDrv_Def.h:289:#define MT_SOC_CODEC_NAME "mt-soc-codec"
		arch/arm64/boot/dts/mt6735.dtsi:1093:		MT_SOC_CODEC_NAME@0x11220000 {
		
		
		
		mic：
		pcmC0D1c               MultiMedia1_Capture
			    {
					.name = "MultiMedia1",
					.stream_name = MT_SOC_DL1_STREAM_NAME,
					.cpu_dai_name   = MT_SOC_DL1DAI_NAME,
					.platform_name  = MT_SOC_DL1_PCM,
					.codec_dai_name = "ak7738-aif2",
					.codec_name = "ak7738.3-0018",
					.init = mt_soc_audio_init,
					.ops = &mt_machine_audio_ops,
				},
		
			
		参考音：                     DL1_AWB_Record
================================================================================
FB：
    MTKFB@5e200000 {
            compatible = "mediatek,MTKFB";
            reg = <0x5F000000 0x1000000>;
    };
================================================================================
UART：
    AP_DMA_UART0_RX@0x11000400 {
            compatible = "mediatek,AP_DMA_UART0_RX";
            reg = <0x11000400 0x80>;
            interrupts = <0 104 0x8>;
    };

    AP_DMA_UART1_TX@0x11000480 {
            compatible = "mediatek,AP_DMA_UART1_TX";
            reg = <0x11000480 0x80>;
            interrupts = <0 105 0x8>;
    };


================================================================================
I2C：
	驱动：
		misc/mediatek/i2c/mt6735/i2c.c
	DTS节点：
		I2C0@0x11007000 {
				compatible = "mediatek,I2C0";
				cell-index = <0>;
				reg = <0x11007000 0x1000>;
				interrupts = <0 84 0x8>,
							 <0 99 0x8>;
		};
================================================================================
SPI：
	驱动：
		misc/mediatek/spi/mt6735/spi.c
		
	DTS节点：
		SPI1@0x1100A000 {
        cell-index = <0>;
        spi-padmacro = <0>;
        compatible = "mediatek,SPI1";
        reg = <0x1100A000 0x1000>;
        interrupts = <0 118 0x8>;
		};
================================================================================
GPIO：
	drivers/misc/mediatek/mach/mt6735/emx8816aa/dct/dct/cust_gpio_boot.h
	drivers/misc/mediatek/gpio/mt6735/gpio_init.h
	
	drivers/misc/mediatek/mach/mt6735/emx8816aa/dct/dct/cust_gpio_boot.h:1015:#define GPIO119_SMT       GPIO_SMT_DISABLE
	drivers/misc/mediatek/mach/mt6735/emx8816aa/dct/dct/cust_gpio_usage.h
	
	drivers/misc/mediatek/mach/mt6735/emx8816aa/dct/dct/cust_gpio_usage.h:21:#define GPIO_CTP_EINT_PIN         (GPIO11 | 0x80000000)
	drivers/misc/mediatek/mach/mt6735/include/mach/mt_clkbuf_ctl.h:24:#define GPIO_RFIC0_BSI_CS         (GPIO110|0x80000000)
	drivers/misc/mediatek/mach/mt6735/include/mach/gpio_const.h:46:    GPIO8  , GPIO9  , GPIO10 , GPIO11 , GPIO12 , GPIO13 , GPIO14 , GPIO15 ,
	drivers/misc/mediatek/multibridge/mt6735/mt8193/inc/mt8193_gpio.h:57:	GPIO_PIN_GPIO11,
	
	drivers/misc/mediatek/gpio/mt6735/mt_gpio_debug.c
	
	./include/mach/mt_gpio_core.h
	./drivers/misc/mediatek/gpio/mt_gpio_core.c
	
DTS：
	drivers/misc/mediatek/mach/mt6735/emx8816aa/dct/dct/cust_gpio.dtsi:2294:	pinctrl-12 = <&gpio11>;
	
PINCTRL：
	drivers/misc/mediatek/mach/mt6735/emx8816aa/dct/dct/pinctrl-mtk-mt6735.h
	drivers/misc/mediatek/mach/mt6735/emx8816aa/dct/dct/mt6735-pinfunc.h
	
	
工具：
	kernel-3.10/tools/dct/DrvGen.exe

	//上拉或下拉 选择设置：
	mt_set_gpio_pull_select(COL_REG[i], 0);
	mt_set_gpio_pull_select(COL_REG[i], 1);
	//拉高(设置1), 拉低(设置0) 操作： 

	//设置输入 输出：
	mt_set_gpio_dir(u32 pin, u32 dir)  设置输入还是输出
	mt_get_gpio_dir(u32 pin)        获取输入输出的状态

	mt_set_gpio_pull_enable(u32 pin, u32 enable)  上下拉使能
	mt_get_gpio_pull_enable(u32 pin)      获取上下拉状态

	mt_set_gpio_pull_select(u32 pin, u32 select)   上拉或下拉 选择设置
	mt_get_gpio_pull_select(u32 pin)  

	mt_set_gpio_inversion(u32 pin, u32 enable) 
	mt_get_gpio_inversion(u32 pin)  

	mt_set_gpio_out(u32 pin, u32 output)  
	mt_get_gpio_out(u32 pin)   
	mt_get_gpio_in(u32 pin)     

	mt_set_gpio_mode(u32 pin, u32 mode)  
	mt_get_gpio_mode(u32 pin)    

	mt_set_clock_output(u32 num, u32 src, u32 div) 
	mt_get_clock_output(u32 num, u32 *src, u32 *div) 

    mt_set_gpio_dir(GPIO_SPEAKER_EN_PIN,GPIO_DIR_OUT); // output
    mt_set_gpio_out(GPIO_SPEAKER_EN_PIN,GPIO_OUT_ONE); // high
	
	
	
GPIO配置流程：
	drivers/misc/mediatek/gpio/mt_gpio_core.c
	
DTS：
		GPIO@0x10211000 {
			compatible = "mediatek,GPIO";
			reg = <0x10211000 0x1000>;
		};
	MISC设备节点：
		mtgpio
	GPIO PIN属性：可读，可写
		mtgpio/pin
	使用方法：
		方法1：
		GPIOMSG("cat pin  #show all pin setting\n");
		GPIOMSG("echo -wmode num x > pin #num:pin,x:the mode 0~7\n");
		GPIOMSG("echo -wpsel num x > pin #x: 1,pull-up; 0,pull-down\n");
		GPIOMSG("echo -wdout num x > pin #x: 1,high; 0, low\n");
		GPIOMSG("echo -wpen num x > pin  #x: 1,pull enable; 0 pull disable\n");
		GPIOMSG("echo -wies num x > pin  #x: 1,ies enable; 0 ies disable\n");
		GPIOMSG("echo -wdir num x > pin  #x: 1, output; 0, input\n");
		/*GPIOMSG("echo -wdinv num x > pin #x: 1, inversion enable; 0, disable\n");*/
		GPIOMSG("echo -w=num x x x x x x > pin #set all property one time\n");
		GPIOMSG("PIN: [MODE] [PSEL] [DIN] [DOUT] [PEN] [DIR] [IES]\n");
		
		方法2：
		oned_gpio_fd =open("/dev/mtgpio", O_RDWR);  
		if(oned_gpio_fd == -1)  
		{  
		LOGD("1DPower up Fail.........");  
		return -1;  
		}  
		   
		//0x15为设置pin引脚为高电平命令，85表示pin引脚  
		ioctl(oned_gpio_fd, 0x15,85);  
		   
		ioctl(oned_gpio_fd, 0x15,154);  
		ioctl(oned_gpio_fd, 0x15,150);  
		ioctl(oned_gpio_fd, 0x15,69);  
		   
		ioctl(oned_gpio_fd, 0x15,72);  
		//0x14为设置pin引脚为低电平的命令  
		ioctl(oned_gpio_fd, 0x14,78);  
		usleep(1000);  
		
	shell下调试GPIO
		//可以cat查看pin脚状态，分析gpio是否与预期值一致
		cat /sys/devices/virtual/misc/mtgpio/pin
	
	使用方式：
		https://blog.csdn.net/richu123/article/details/51212302
		
		
	Drvgen:
	端子定义修改的效果：
		drivers/misc/mediatek/mach/mt6735/emx8816aa/dct/dct/cust_gpio.dtsi
		修改gpio的dir：由out->in
		        gpio2: gpio@2 {
                pins_cmd_dat {
                        pins = <PINMUX_GPIO2__FUNC_GPIO2>;
                        slew-rate = <1>;                   //表示GPIO的方向为IN
                        slew-rate = <0>;                   //表示GPIO的方向为OUT
						bias-enable;                      //表示关闭GPIO的上拉使能
                        bias-disable;                      //表示关闭GPIO的上拉使能
                        bias-pull-down = <00>;             //表示设置GPIO为下拉
						bias-pull-down = <11>;             //表示设置GPIO为上拉
                        output-low;						   //表示GPIO的方向为OUT，且输出低电平
						output-high;                       //表示GPIO的方向为OUT，且输出高电平
						
		-#define GPIO_CTP_EINT_PIN_M_EINT   GPIO_MODE_00
		如果设置为中断模式的话，将定义上述宏
================================================================================
Touch：
	./drivers/input/touchscreen/mediatek/TP_ti947_BIRD_C
	./drivers/input/touchscreen/mediatek/TP_ti947_BIRD_C/tp_ti947_driver.c
	./drivers/input/touchscreen/mediatek/TP_ti947_BIRD_C/Kconfig
	./drivers/input/touchscreen/mediatek/TP_ti947_BIRD_C/Makefile
	./drivers/input/touchscreen/mediatek/TP_ti947_BIRD_C/tpd_custom_ti947.h
	
	
	947touch驱动：
       框架：
              drivers/input/touchscreen/mediatek/mtk_tpd.c
              drivers/input/touchscreen/mediatek/tpd_setting.c
       驱动：
              drivers/input/touchscreen/mediatek/TP_ti947_BIRD_C/tp_ti947_driver.c
	
	
	//将该GPIO设置为中断
	mt_set_gpio_mode(11, GPIO_CTP_EINT_PIN_M_EINT);
	//设置为输入
	mt_set_gpio_dir(11, GPIO_DIR_IN);
	//设置为无上拉
	mt_set_gpio_pull_enable(11, GPIO_PULL_DISABLE);

	//注册中断：
    mt_eint_registration(11, EINTF_TRIGGER_FALLING, tpd_eint_interrupt_handler, 0);// disable auto-unmask
	
================================================================================
显示（Framebuffer）：
	驱动：
		drivers/misc/mediatek/videox/mt6735/mtkfb.c
	DTS：
		arch/arm64/boot/dts/emx8816aa.dts
	    MTKFB@5e200000 {
                compatible = "mediatek,MTKFB";
                reg = <0x5F000000 0x1000000>;
        };
	流程：
		drivers/misc/mediatek/dispsys/mt6735/ddp_dsi.c:3847:DDP_MODULE_DRIVER ddp_driver_dsi0 =
		drivers/misc/mediatek/dispsys/mt6735/ddp_info.c:169:extern DDP_MODULE_DRIVER ddp_driver_dsi0;
		

947芯片驱动：
       drivers/misc/mediatek/lcm/cpt_clap070wp03xg_sn65dsi83_ti947/cpt_clap070wp03xg_sn65dsi83_ti947.c
       drivers/misc/mediatek/lcm/cpt_clap070wp03xg_sn65dsi83_ti947/sn65dsi83_i2c.c
       drivers/misc/mediatek/lcm/cpt_clap070wp03xg_sn65dsi83_ti947/ti947_i2c.c
       
       drivers/misc/mediatek/lcm/mt65xx_lcm_list.c
       misc/mediatek/videox/mt6735/disp_lcm.c
       misc/mediatek/mach/mt6735/emx8816aa/lcm/mt65xx_lcm_list.c
HDMI：
	   drivers/misc/mediatek/ext_disp/mt6735/extd_hdmi_drv.c
DSI：
		drivers/misc/mediatek/dispsys/mt6735/ddp_dsi.c:2585:	lcm_drv->set_util_funcs(utils);
DPI：
		drivers/misc/mediatek/dispsys/mt6735/ddp_dpi.c:815:    lcm_drv->set_util_funcs(utils);
		
	DSI流程：
		
		misc/mediatek/dispsys/mt6735/ddp_info.c:216:    &ddp_driver_dsi0, //DISP_MODULE_DSI0
		misc/mediatek/dispsys/mt6735/ddp_manager.c:206:    if(module == DISP_MODULE_DSI0)
	   
================================================================================
cmdline：
	console=tty0 console=ttyMT0,921600n1 root=/dev/ram vmalloc=496M androidboot.hardware=mt6735 slub_max_order=0 slub_debug=O bootopt=64S3,32N2,64N2 lcm=0-cpt_clap070wp03xg_sn65dsi83_ti947 fps=6377 vram=19726336 androidboot.selinux=permissive printk.disable_uart=0 ddebug_query="file *mediatek* +p ; file *gpu* =_" bootprof.pl_t=5123 bootprof.lk_t=1492 boot_reason=0 androidboot.serialno=0123456789ABCDEF androidboot.bootreason=power_key androidboot.devicetype=common androidboot.devicetype=commoncommon gpt=1

	
bootargs参数传递过程：
	https://blog.csdn.net/eleven_xiy/article/details/72835181
	
	app/mt_boot/mt_boot.c:1183:void mt_boot_init(const struct app_descriptor *app)
	app/mt_boot/mt_boot.c:1304:.init = mt_boot_init,
	app/mt_boot/mt_boot.c:1246:	boot_linux_from_storage();
	app/mt_boot/sys_commands.c:34:extern int boot_linux_from_storage(void);
		strlen += sprintf(commanline, "%s %s", commanline, g_boot_hdr->cmdline);
		strlen += sprintf(commanline, "%s lcm=%1d-%s", commanline, DISP_IsLcmFound(), mt_disp_get_lcm_id());
		strlen += sprintf(commanline, "%s fps=%1d", commanline, mt_disp_get_lcd_time());
		strlen += sprintf(commanline, "%s vram=%1d", commanline, DISP_GetVRamSize());
		sprintf(commanline, "%s androidboot.selinux=permissive", commanline);
	app/mt_boot/mt_boot.c:743:    boot_linux_fdt((void *)kernel, (unsigned *)tags,
	//解析dtb，写入到DRAM指定区域；
		ret = fdt_setprop_string(fdt, offset, "bootargs", cmdline);
		//此时，LK将参数已bootargs的方式，传给Kernel，然后启动kernel。
	
================================================================================
Kernel启动流程：

	init/main.c:476:asmlinkage void __init start_kernel(void)  //Kernel的入口函数
		parse_early_param(); //解析uboot参数
		mm_init(); //内存初始化
		console_init(); //控制台初始化
		rest_init(); // 驱动相关启动
			kernel_thread(kernel_init, NULL, CLONE_FS | CLONE_SIGHAND);
				kernel_init_freeable();
					do_basic_setup();
						do_initcalls(); //加载各level的驱动程序
				run_init_process("/bin/init") //驱动程序加载完成后，调用init进程

	
	drivers/misc/mediatek/mach/mt6735/core.c:114:	.reserve	= mt_reserve,
	drivers/misc/mediatek/mach/mt6735/mt_devs.c:2903:void mt_reserve(void)
	drivers/misc/mediatek/mach/mt6735/mt_devs.c:2018:__init int mt_board_init(void)
	drivers/misc/mediatek/mach/mt6735/include/mach/devs.h:22:extern int mt_board_init(void);
	
================================================================================
Kernel build：
	arch/arm64/configs/emx8816aa_debug_defconfig
		CONFIG_MTK_PLATFORM="mt6735"
		CONFIG_ARCH_MTK_PROJECT="emx8816aa"
		CONFIG_CUSTOM_KERNEL_LCM="cpt_clap070wp03xg_sn65dsi83_ti947"
	
	MTK_PLATFORM=mt6735
	MTK_CUSTOM_PATH  := $(srctree)/drivers/misc/mediatek
	
	MTK_PLATFORM_PATH_ROOT := $(srctree)/drivers/misc/mediatek/mach/$(MTK_PLATFORM)
								drivers/misc/mediatek/mach/mt6735
	MTK_PROJECT_PATH_ROOT := $(srctree)/drivers/misc/mediatek/mach/$(MTK_PLATFORM)/$(ARCH_MTK_PROJECT)
								drivers/misc/mediatek/mach/mt6735/emx8816aa
	
================================================================================
printk：
	驱动：
		misc/mediatek/mtprof/mt_printk_ctrl.c
	设备节点：
		/proc/mtprintk
	Uart：
		drivers/misc/mediatek/uart/uart.c
	printk：
		kernel/printk.c
	LK中设置参数：
		printk.disable_uart=0 ddebug_query="file *mediatek* +p 
		

================================================================================
LK：
	启动kernel
	bootable/bootloader/lk/app/mt_boot/mt_boot.c
================================================================================
MIPI相关资料：
	https://blog.csdn.net/kris_fei/article/details/77774995
	https://blog.csdn.net/changqing1990/article/details/78595565
	https://blog.csdn.net/changqing1990/article/details/81128552

================================================================================
BT565

================================================================================
LK：
	宏定义：
	target/emx8816aa/rules.mk
	
	配置文件：
		bootable/bootloader/project/emx8816aa.mk

	启动流程：
	kernel/main.c                      //LK入口函数：
	void kmain(void)
		kernel/thread.c:536:void thread_init_early(void)
		thread_init_early
		
		platform/mt6735/platform.c     //platform入口 
		platform_early_init
			    /* initialize the uart */
				uart_init_early();
				platform/mt6735/uart.c:349:void uart_init_early(void)
				
				mtk_wdt_init();
				
				//i2c init
				i2c_hw_init();
				platform/mt6735/mt_i2c.c:846:int i2c_hw_init(void)
		
				pmic_init();
		
		target/emx8816aa/init.c:47:void target_early_init(void)
		target_early_init

		
	UART：	
		platform/mt6735/uart.c:349:void uart_init_early(void)
	
	I2C：
		platform/mt6735/mt_i2c.c:846:int i2c_hw_init(void)
	
	启动模式（bootmode）：
		/* boot type definitions */
		typedef enum {
			NORMAL_BOOT = 0,
			META_BOOT = 1,
			RECOVERY_BOOT = 2,
			SW_REBOOT = 3,
			FACTORY_BOOT = 4,
			ADVMETA_BOOT = 5,
			ATE_FACTORY_BOOT = 6,
			ALARM_BOOT = 7,
		#if defined(CONFIG_MTK_KERNEL_POWER_OFF_CHARGING)
			KERNEL_POWER_OFF_CHARGING_BOOT = 8,
			LOW_POWER_OFF_CHARGING_BOOT = 9,
		#endif
			UNKNOWN_BOOT
		} BOOTMODE;
		
		流程：
			kernel/main.c:179:	platform_init();
			platform/mt6735/platform.c:735:    boot_mode_select();
			platform/mt6735/boot_mode.c:81:void boot_mode_select(void)
			
			platform/mt6735/mt_rtc.c:221:bool Check_RTC_Recovery_Mode(void)
			platform/mt6735/boot_mode.c:129:    if(Check_RTC_Recovery_Mode())   //判断是否进入Recovery模式
			platform/mt6735/boot_mode.c:104:    if(Check_RTC_PDN1_bit13())      //判断是否进入fastboot模式
	
	Fastboot：
		app/mt_boot/fastboot.c:405:int fastboot_init(void *base, unsigned size)
		app/mt_boot/mt_boot.c:1297:	fastboot_init(target_get_scratch_address(), sz);
		app/mt_boot/fastboot.c:468:    fastboot_register("oem reboot-recovery",cmd_oem_reboot2recovery, FALSE);
		
	Display：
		https://blog.csdn.net/u012852605/article/details/84978677
		
		arch/arm/crt0.S:187:	bl		kmain
		kernel/main.c:76:void kmain(void)
		kernel/main.c:128:	thread_resume(thread_create("bootstrap2", &bootstrap2, NULL, DEFAULT_PRIORITY, DEFAULT_STACK_SIZE));
		kernel/main.c:179:	platform_init();
		platform/mt6735/platform.c:684:    mt_disp_init((void *)g_fb_base);
		platform/mt6735/mt_disp_drv.c:235:        primary_display_init(NULL);
		platform/mt6735/primary_display.c:580:		pgc->plcm = disp_lcm_probe(NULL, LCM_INTERFACE_NOTDEFINED);
		platform/mt6735/disp_lcm.c:267:disp_lcm_handle* disp_lcm_probe(char* plcm_name, LCM_INTERFACE_ID lcm_id)
			platform/mt6735/disp_lcm.c:130:	dpmgr_set_lcm_utils(handle, plcm->drv);
			platform/mt6735/ddp_manager.c:781:            if((ddp_modules_driver[module_name]->set_lcm_utils!= 0)&&lcm_drv)
			platform/mt6735/ddp_dsi.c:2600:int ddp_dsi_set_lcm_utils(DISP_MODULE_ENUM module, LCM_DRIVER *lcm_drv)
			dev/lcm/cpt_clap070wp03xg_sn65dsi83_ti947/cpt_clap070wp03xg_sn65dsi83_ti947.c:766:	.set_util_funcs = lcm_set_util_funcs
		
			platform/mt6735/disp_lcm.c:314:					handle = _display_interface_path_init(plcm);
			platform/mt6735/disp_lcm.c:131:	dpmgr_path_init(handle, CMDQ_DISABLE);
			platform/mt6735/ddp_manager.c:428:                 ddp_modules_driver[module_name]->init(module_name, cmdqHandle);
			
			platform/mt6735/disp_lcm.c:141:	dpmgr_path_config(handle, &data_config, CMDQ_DISABLE);
			platform/mt6735/ddp_manager.c:581:                ddp_modules_driver[module_name]->config(module_name, config, cmdqHandle);
			platform/mt6735/ddp_dsi.c:2249:int ddp_dsi_config(DISP_MODULE_ENUM module, disp_ddp_path_config *config, void *cmdq_handle)
			platform/mt6735/ddp_dsi.c:2742:	.config		= ddp_dsi_config,
		
		到这里整个lk关于lcm驱动的加载过程就都介绍完了，做完上面介绍的流程之后，在跑完lk准备调到kernel之前，lk会通过fdt将加载到的lcm相关信息传给kernel，以便后续的操作
		app/mt_boot/mt_boot.c:1305:.init = mt_boot_init,
		app/mt_boot/mt_boot.c:1247:	boot_linux_from_storage();   // 此次，来判断启动是boot，还是recovery
		app/mt_boot/mt_boot.c:731:void boot_linux(void *kernel, unsigned *tags,
		app/mt_boot/mt_boot.c:230:int boot_linux_fdt(void *kernel, unsigned *tags,

		
		// LK传给kernel的显示参数：
		app/mt_boot/mt_boot.c:523:    ptr = (char *)target_atag_videolfb((unsigned *)buf);
		    
			ptr = (char *)target_atag_videolfb((unsigned *)buf);
			ret = fdt_setprop(fdt, offset, "atag,videolfb", buf, ptr - buf);
			
				[2760] videolfb - fb_base    = 0xbecf0000
				[2760] videolfb - islcmfound = 0
				[2880] videolfb - fps        = 6378
				[2880] videolfb - vram       = 19726336
				[2880] videolfb - lcmname    = cpt_clap070wp03xg_sn65dsi83_ti947
		
		DDP_MODULE_DRIVER ddp_driver_dsi0 = 
		{
			.module 		= DISP_MODULE_DSI0,
			.init			= ddp_dsi_init,
			.deinit		= ddp_dsi_deinit,
			.config		= ddp_dsi_config,
			.trigger		= ddp_dsi_trigger,
			.start		= ddp_dsi_start,
			.stop		= ddp_dsi_stop,
			.reset		= ddp_dsi_reset,
			.power_on	= ddp_dsi_power_on,
			.power_off	= ddp_dsi_power_off,
			.is_idle		= ddp_dsi_is_idle,
			.is_busy		= ddp_dsi_is_busy,
			.dump_info	= ddp_dsi_dump,
			.set_lcm_utils =  ddp_dsi_set_lcm_utils,
			.polling_irq	 = ddp_dsi_polling_irq
		};	

		LCM_DRIVER cpt_clap070wp03xg_sn65dsi83_ti947_lcm_drv = 
		{
			.name		    = "cpt_clap070wp03xg_sn65dsi83_ti947",
			.set_util_funcs = lcm_set_util_funcs,
			.get_params     = lcm_get_params,
			.init           = lcm_init,
			.suspend        = lcm_suspend,
			.resume         = lcm_resume,
			.compare_id    = lcm_compare_id,
		};
		
	Logo显示：
		kernel/main.c:179:	platform_init();
		platform/mt6735/platform.c:883:        mt_disp_show_boot_logo();
		platform/mt6735/mt_logo.c:136:void mt_disp_show_boot_logo(void)
		
		图片：
		dev/logo/ecarx1080p/ecarx1080p_uboot.bmp
		
	DSI：
		platform/mt6735/platform.c:684:    mt_disp_init((void *)g_fb_base);
		platform/mt6735/mt_disp_drv.c:235:        primary_display_init(NULL);
		platform/mt6735/primary_display.c:689:	ret = disp_lcm_init(pgc->plcm);
		platform/mt6735/disp_lcm.c:461:            ret = DSI_set_cmdq( _get_dst_module_by_lcm(plcm), NULL, data_array, 1, 1); // read maximum return size.
		platform/mt6735/ddp_dsi.c:2029:	DISPCHECK("DSI_set_cmdq, module=%s, cmdq=0x%08x\n", module_name, cmdq);
		
		
		
	暂定：
		drivers/misc/mediatek/cmdq/mt6735/cmdq_device.c:178:		cmdq_dev_alloc_disp_module_PA_by_name("mediatek,DISPSYS", (i-CMDQ_MODULE_INSTRUCTION_COUNT_DISP_OVL0),
		drivers/misc/mediatek/dispsys/mt6735/ddp_drv.c:768:	{ .compatible = "mediatek,DISPSYS", },
		arch/arm/boot/dts/mt6735.dtsi:1154:			compatible = "mediatek,DISPSYS";
		
		drivers/misc/mediatek/dispsys/mt6735/ddp_drv.c:677:	dsi_reg_va = dispsys_reg[DISP_REG_DSI0];
		drivers/misc/mediatek/dispsys/mt6735/mt6735m/ddp_reg.h:1172:extern unsigned long dsi_reg_va;
		drivers/misc/mediatek/dispsys/mt6735/ddp_irq.c:299:                DISP_CPU_REG_SET(dsi_reg_va + 0xC, ~reg_temp_val);

================================================================================
Kernel：
	WATCHDOG：
	drivers/misc/mediatek/wdt/mt6735/mtk_wdt.c
	
	Camera流程：
		https://www.cnblogs.com/reality-soul/p/4668532.html
		
		
	PWM：
		drivers/misc/mediatek/dispsys/mt6735/ddp_pwm.c:333:DDP_MODULE_DRIVER ddp_driver_pwm =
		drivers/misc/mediatek/dispsys/mt6735/ddp_info.c:199:extern DDP_MODULE_DRIVER ddp_driver_pwm;
		drivers/misc/mediatek/dispsys/mt6735/ddp_info.c:214:    &ddp_driver_pwm, //DISP_MODULE_PWM0 
		
		
		
	PWM：
		mediatek/videox/mt6735/primary_display.c:5135:int primary_display_init(char *lcm_name, unsigned int lcm_fps)
		mediatek/videox/mt6735/primary_display.c:5150:	dpmgr_init();
		mediatek/dispsys/mt6735/ddp_debug.c:957:void ddp_debug_init(void)
		mediatek/dispsys/mt6735/ddp_manager.c:2037:    ddp_debug_init();
		drivers/misc/mediatek/leds/leds_drv.c:497:		INIT_WORK(&g_leds_data[i]->work, mt_mt65xx_led_work);
		drivers/misc/mediatek/leds/mt6735/leds_hal.h:29:extern void mt_mt65xx_led_work(struct work_struct *work);
		drivers/misc/mediatek/leds/mt6735/leds.c:712:void mt_mt65xx_led_work(struct work_struct *work)
		
		
		drivers/misc/mediatek/leds/leds_drv.c:170:	mt_led_set_pwm(pwm_num, led);
		drivers/misc/mediatek/leds/mt6735/leds_hal.h:24:extern int mt_led_set_pwm(int pwm_num, struct nled_setting* led);
		drivers/misc/mediatek/leds/mt6735/leds.c:177:int mt_led_set_pwm(int pwm_num, struct nled_setting* led)
		
	显示debug：
		echo dbg_log:1 > /d/dispsys
		/sys/kernel/debug/dispsys
			root@emx8816aa:/sys/kernel/debug # cat dispsys
			USAGE:
				   echo [ACTION]>/d/dispsys
			ACTION:
				   regr:addr
						  :regr:0xf400c000
				   regw:addr,value          :regw:0xf400c000,0x1
				   dbg_log:0|1|2            :0 off, 1 dbg, 2 all
				   irq_log:0|1              :0 off, !0 on
				   met_on:[0|1],[0|1],[0|1] :fist[0|1]on|off,other [0|1]direct|decouple
				   backlight:level
				   dump_aal:arg
				   mmp
				   dump_reg:moduleID
				   dump_path:mutexID
				   dpfd_ut1:channel
		
		/sys/kernel/debug/disp/dump
================================================================================
HDMI：DPI接口
	DTS：
		arch/arm64/boot/dts/mt6735.dtsi:1263:			compatible = "mediatek,HDMI";
	
	驱动：
		drivers/misc/mediatek/ext_disp/mt6735/mtk_ext_disp_mgr.c:349:	{.compatible = "mediatek,HDMI", },
	
	详解：
		创建class及device
		hdmitx/hdmitx
		
		作用：
			1.	控制打开/关闭HDMI功能
			2.	设置分辨率
		
	Kernel配置：
		arch/arm64/configs/emx8816aa_debug_defconfig:1358:# CONFIG_MTK_HDMI_SUPPORT is not set
		arch/arm64/configs/emx8816aa_debug_defconfig:1360:CONFIG_CUSTOM_KERNEL_HDMI=""
		arch/arm64/configs/emx8816aa_defconfig:1355:# CONFIG_MTK_HDMI_SUPPORT is not set
		arch/arm64/configs/emx8816aa_defconfig:1357:CONFIG_CUSTOM_KERNEL_HDMI=""

		Sii8338、Sii8348、MT8193
		根据硬件设计，修改IIC的channel，IIC的地址，配置GPIO，配置DPI，配置IIS
	
	Framework配置HDMI：
		device/pvetec/emx8816aa/ProjectConfig.mk +386
			emx8816aa/ProjectConfig.mk:386:MTK_HDMI_SUPPORT = no
				385:MTK_HDMI_HDCP_SUPPORT = no
				386:MTK_HDMI_SUPPORT = no
				425:MTK_INTERNAL_HDMI_SUPPORT = no
				496:MTK_MT8193_HDMI_SUPPORT = no

	FB类型：
		MTKFB_DISPIF_PRIMARY_LCD = 0,
		MTKFB_DISPIF_HDMI = 1,
	
	显示类型：
		typedef enum {
			DISPIF_MODE_VIDEO = 0,
			DISPIF_MODE_COMMAND
		} MTKFB_DISPIF_MODE;
	
	显示格式：
		DISPIF_FORMAT_RGB888
	
	流程：
		drivers/misc/mediatek/ext_disp/mt6735/mtk_ext_disp_mgr.c:459:    hdmi_init();
		drivers/misc/mediatek/ext_disp/mt6735/extd_hdmi_drv.c:1433:void hdmi_init()
			hdmi_drv = (HDMI_DRIVER *)HDMI_GetDriver(); //获取HDMI芯片驱动，比如：Sii8338、Sii8348、MT8193
			
	现有代码的疑问：
		1.	E01设备上使用的HDMI编解器芯片的型号？Sii8338、Sii8348、MT8193
		2.	E01 HDMI使用的DPI接口，分辨率及帧率是多少？1920*720*60?
		
	DPI0：
		mt6735.dtsi:1266:		DPI@0x14012000 {
		mt6735.dtsi:1267:			compatible = "mediatek,DPI0";
		
		misc/mediatek/dispsys/mt6735/ddp_dpi.c:1054:        node = of_find_compatible_node(NULL, NULL, "mediatek,DPI0");

		
================================================================================
MTK Android Driver知识大全
	https://www.cnblogs.com/biglucky/p/4413797.html
================================================================================
系统启动时间统计：
	/proc/bootprof
	130|root@emx8816aa:/proc # cat bootprof
----------------------------------------
0           BOOT PROF (unit:msec)
----------------------------------------
      3113        : preloader
      1341        : lk
       196        : lk->Kernel
----------------------------------------
      4472.046384 : Kernel_init_done
      4909.249845 : INIT: on init start
      4925.795153 : INIT:Mount_START
      5561.890076 : INIT:Mount_END
      5660.336615 : post-fs-data: on modem start
      7410.465999 : BOOT_Animation:START
      8094.765153 : Zygote:Preload Start
      8128.838922 : Zygote:Preload Start
      9180.035230 : Zygote:Preload 343 obtain resources in 544ms
      9191.100307 : Zygote:Preload 41 resources in 10ms
      9205.593538 : Zygote:Preload 343 obtain resources in 558ms
      9216.360769 : Zygote:Preload 41 resources in 9ms
      9684.811230 : Zygote:Preload 3005 classes in 1586ms
      9724.175846 : Zygote:Preload 3005 classes in 1519ms
      9765.749538 : Zygote:Preload End
      9776.111999 : Zygote:Preload End
     10265.456384 : Android:PackageManagerService_Start
     10354.801999 : Android:PMS_scan_START
     10539.530538 : Android:PMS_scan_data_done:/system/framework
     11133.292769 : Android:PMS_scan_data_done:/system/priv-app
     12099.090384 : Android:PMS_scan_data_done:/system/app
     12131.278461 : Android:PMS_scan_data_done:/system/plugin
     12135.267307 : Android:PMS_scan_data_done:/data/app
     12141.271307 : Android:PMS_scan_END
     12202.939846 : Android:PMS_READY
     16749.123154 : BOOT_Animation:END
----------------------------------------
================================================================================
MTK Camera:
	MTK Camera 从底层到应用层一网打尽
	https://www.jianshu.com/p/5f538820e370?from=timeline&isappinstalled=0


================================================================================
升级：
	1.升级程序将升级包数据copy到cache分区后，使用set_bootloader_message(&boot)函数，将bootmode数据存储在misc（para）分区，设置启动模式。
	2.该bootmode数据存储在misc（para）分区
	3.LK里调用recovery_check_command_trigger函数，确认是否进入recovery模式
	4.lk将启动recovery分区的boot镜像，进入升级模式
	
	注：
	uboot中会先后检查三种方式进入recovery是否成立：
	第一种是kernel直接写一个寄存器来标记下次启动将进入recovery模式；
	第二种是快捷键：powerkey+downVOL；
	第三中就是上层应用发送下来的回复出厂设置的命令，这个命令在restart之前kernel会往MISC分区中写command(boot-recovery)。
	
	代码流程：
	bootable/recovery
		bootloader.cpp:77:int set_bootloader_message(const struct bootloader_message *in) {
	
	bootable/bootable/lk
		platform/mt6735/recovery.c:93:BOOL recovery_check_command_trigger(void)
	
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================
================================================================================